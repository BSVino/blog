Title: OOP, DOP, and Levels of Abstraction
Time: 1462641884

The Data-Oriented/OOP-Is-Bad crowd has been making the case lately for preferring to write a single long procedure instead of the oop style kindgom-of-nouns one-class-one-purpose way of doing things. The idea is that separating twenty different concerns into twenty different classes makes code non-linear and more difficult to understand, and it is better to have just one long procedure that does everything necessary to accomplish your task. That's reasonable and I agree with it. But consider this code, which I took from one of my projects (so that I can't be accused of using a contrived example) and modified to take the "long procedure" idea to its absurd conclusion. (Apologies for the lack of syntax highlighting.)

	// Turns a text string into a series of quad draw commands
	void Renderer::DrawText(RenderOptions* options, const char* text,
			ResourceIndex font_index, vec2 position) {
		RenderQuadCommand c;

		// Set up the render options
		c.options = *options;

		if (c.options.shader == VInvalid(ShaderIndex)) {
			c.options.shader = SHADER_TEXT;
			c.options.enable_depth = 0;
			c.options.blendmode = Blend::PremultipliedAlpha;
			c.options.diffuse_texture = render_font->m_texture;
		}

		TRenderFont* render_font = &m_resources[font_index].m_font;
		TRenderTexture* texture = &m_resources[render_font->m_texture].m_texture;
		TFont* font = render_font->m_font_file;
		TGlyphIndex* codepoint_table = (TGlyphIndex*)((char*)font + font->m_codepoint_table_offset);
		PackedChar* glyph_table = (PackedChar_t*)((char*)font + font->m_glyphs_offset);

		vec2 pen = position;

		// Find the length of the text
		size_t text_length = 0;

		{
			const char* text_p = text;
			while (*text_p)
				text_length++;
		}

		// Generate a quad for every letter
		for (int letter = 0; letter < text_length; letter++) {
			// Find the glyph of this letter
			TGlyphIndex glyph_index = VInvalid(TGlyphIndex);
			if (text[letter] >= 0 && text[letter] < font->m_num_codepoints)
				glyph_index = codepoint_table[text[letter]];

			if (glyph_index == VInvalid(TGlyphIndex))
				glyph_index = codepoint_table['#'];

			if (glyph_index == VInvalid(TGlyphIndex))
				continue;

			// Generate a quad that has this glyph on it
			PackedChar_t* glyph = glyph_table[glyph_index];

			float x0 = (float)glyph->x0/texture->m_data.m_width;
			float x1 = (float)glyph->x1/texture->m_data.m_width;
			float y0 = (float)glyph->y0/texture->m_data.m_height;
			float y1 = (float)glyph->y1/texture->m_data.m_height;

			float draw_x0 = pen.x + glyph->xoff;
			float draw_y0 = pen.y + glyph->yoff;
			float draw_x1 = pen.x + glyph->xoff2;
			float draw_y1 = pen.y + glyph->yoff2;

			c.quad.v1.x = draw_x0;
			c.quad.v1.y = draw_y0;
			c.quad.v1.z = 0;
			c.quad.u1.x = x0;
			c.quad.u1.y = y0;
			c.quad.v2.x = draw_x0;
			c.quad.v2.y = draw_y1;
			c.quad.v2.z = 0;
			c.quad.u2.x = x0;
			c.quad.u2.y = y1;
			c.quad.v3.x = draw_x1;
			c.quad.v3.y = draw_y1;
			c.quad.v3.z = 0;
			c.quad.u3.x = x1;
			c.quad.u3.y = y1;
			c.quad.v4.x = draw_x1;
			c.quad.v4.y = draw_y0;
			c.quad.v4.z = 0;
			c.quad.u4.x = x1;
			c.quad.u4.y = y0;

			// Append the quad to the render commands list
			m_render_commands.m_length++;
			m_render_commands.m_elements = (RenderCommand*)realloc(m_render_commands.m_elements, sizeof(RenderCommand)*(size_t)m_render_commands.m_length);
			m_render_commands.m_elements[m_render_commands.m_length-1] = c;

			// If this is not the last letter, add kerning
			if (letter + 1 < text_length) {
				float kerning;

				TGlyphIndex next_glyph_index = codepoint_table[text[letter+1]];

				// Binary search of the kerning table
				int l = 0;
				int r = (int)font->m_num_kerning_entries - 1;
				int needle = glyph_index << 16 | next_glyph_index;
				int straw;
				TKerningEntry* kerning_table = (TKerningEntry*)((char*)font + font->m_kerning_table_offset)

				while (l <= r) {
					int m = (l + r) >> 1;
					straw = kerning_table[m].glyph1 << 16 | kerning_table[m].glyph2;
					if (needle < straw)
						r = m - 1;
					else if (needle > straw)
						l = m + 1;
					else {
						kerning = kerning_table[m].advance;
						break;
					}
				}

				pen.x += kerning;
			}

			pen.x += glyph->xadvance;
		}
	}

I'm sure you didn't just read all that. Not only is there no syntax highlighting (sorry again) but it just does too many things. There's a string length procedure, a binary search, a bunch of table lookups, some error checking code, setup code, and for some crazy reason I've inlined the code to push onto a dynamic-size array. The only procedure call in that code is to realloc(), which can't be inlined.

That's obviously absurd. I admit that I'm strawmanning maybe a little; The "OOP is bad" crowd would certainly agree that this is bad code. The reason it's bad is that there are too many levels of abstraction in the same procedure. Let's look at it again, but this time anything that's not directly necessary to render text into quads has been pushed out:

	// Turns a text string into a series of quad draw commands
	void Renderer::DrawText(RenderOptions* options, const char* text,
			ResourceIndex font_index, vec2 position) {
		RenderQuadCommand c;

		// Set up the render options
		c.options = *options;

		if (c.options.shader == VInvalid(ShaderIndex))
			SetupShader(&c.options, SHADER_TEXT, render_font->m_texture);

		TRenderFont* render_font = GetRenderFont(font_index);
		float texture_width = (float)GetRenderTexture(render_font->m_texture)->GetWidth();
		float texture_height = (float)GetRenderTexture(render_font->m_texture)->GetHeight();
		TFont* font = render_font->m_font_file;

		vec2 pen = position;
		size_t text_length = strlen(text);

		// Generate a quad for every letter
		for (int letter = 0; letter < text_length; letter++) {
			PackedChar_t* glyph = font->FindGlyph(text[letter]);

			if (!glyph)
				continue;

			// Set up the quad to render
			vec2 quad_min = pen + vec2(glyph->xoff, glyph->yoff);
			vec2 quad_max = pen + vec2(glyph->xoff2, glyph->yoff2);

			SetQuadBillboard(&c.quad, quad_min, quad_max);

			vec2 uv_min(glyph->x0/texture_width, glyph->y0/texture_height);
			vec2 uv_max(glyph->x1/texture_width, glyph->y1/texture_height);

			SetQuadUVs(&c.quad, uv_min, uv_max);

			m_render_commands.push_back(&c);

			// If this is not the last letter, add kerning
			if (letter + 1 < text_length) {
				TGlyphIndex next_glyph_index = font->GetCodepointTable()[text[letter+1]];
				pen.x += font->GetKerning(glyph_index, next_glyph_index);
			}

			pen.x += glyph->xadvance;
		}
	}

It's still a bit verbose, but I think it's much easier to follow this code since the irrelevant tasks have been abstracted away.

The goal of OOP is to reduce complexity and it does so by adding layers of abstraction. Modern C++ wants you to create the abstraction of a 'Letter' class that handles issues like kerning and quads, so the DrawText procedure doesn't have to know about kerning and quads in order to do its job of rendering text. Add in virtual functions and operator overloading and RAII and move constructors and the result is that a modern C++ application has a hundred layers of useless abstractions. The totality of abstractions makes it difficult to understand the structure and behavior of the program at a high level. The backlash against OOP has been somewhat focused on the excessive abstractions that OOP encourages programmers to write.

But the problem isn't with the abstractions, it's with OOP. The code above was made easier to read when I added abstractions. Subroutines are a useful abstraction. I don't need to know exactly how the kerning value is found in order to draw the text. When kerning calculation code is present, the code changes between multiple levels of abstraction in a single procedure. Those context switches are what make the code difficult to understand. Keeping the entire procedure within the same level of abstraction increases the ability of the programmer to understand the code.
